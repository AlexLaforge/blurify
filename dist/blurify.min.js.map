{"version":3,"file":null,"sources":["../src/utils.js","../src/index.js"],"sourcesContent":["export function preloadImages(images) {\n    let newimages = [],\n        loadedImagesCount = 0,\n        postAction = function () {};\n\n    images = (typeof images != 'object') ? [images] : images;\n\n    function imageLoadPost() {\n        loadedImagesCount++;\n        if (loadedImagesCount == images.length) postAction(newimages);\n    }\n\n    images.map((image, i) => {\n        newimages[i] = new Image();\n        newimages[i].crossOrigin = '*';\n        newimages[i].src = image.src;\n        newimages[i].onload = function () {\n            imageLoadPost();\n        };\n        newimages[i].onerror = function () {\n            imageLoadPost();\n        };\n    });\n\n    return {\n        done(callback) {\n            postAction = callback || postAction;\n        },\n    };\n}\n","import {\n    preloadImages,\n} from './utils';\n\nexport default class blurify {\n    constructor(options) {\n        this.blur = options.blur || 6;\n        this.imageType = options.imageType || `image/jpeg`;\n        this.$els = [...options.images];\n        preloadImages(this.$els).done(images => {\n            images.map((image, index) => {\n                this.$els[index].src = this.getDataURL(image);\n            });\n        });\n    }\n\n    blurify(canvas, blur) {\n        let ctx = canvas.getContext('2d');\n        ctx.globalAlpha = 0.5;\n        for (let y = -blur; y <= blur; y += 2) {\n            for (let x = -blur; x <= blur; x += 2) {\n                ctx.drawImage(canvas, x, y);\n                if (x >= 0 && y >= 0) ctx.drawImage(canvas, -(x - 1), -(y - 1));\n            }\n        }\n        ctx.globalAlpha = 1;\n    }\n\n    getDataURL(image) {\n        let canvas = document.createElement('canvas'),\n            ctx = canvas.getContext('2d');\n\n        canvas.width = image.width;\n        canvas.height = image.height;\n        ctx.drawImage(image, 0, 0);\n        this.blurify(canvas, this.blur);\n        return canvas.toDataURL(this.imageType);\n    }\n}\n"],"names":["preloadImages","images","imageLoadPost","loadedImagesCount","length","postAction","newimages","map","image","i","Image","crossOrigin","src","onload","onerror","callback","options","blur","imageType","$els","this","done","index","_this","getDataURL","canvas","ctx","getContext","globalAlpha","y","x","drawImage","document","createElement","width","height","blurify","toDataURL"],"mappings":"+kBAAO,SAASA,GAAcC,WAOjBC,SAEDC,GAAqBF,EAAOG,QAAQC,EAAWC,MARnDA,MACAH,EAAoB,EACpBE,EAAa,sBAEU,oBAAVJ,gBAAAA,KAAuBA,GAAUA,IAO3CM,IAAI,SAACC,EAAOC,KACLA,GAAK,GAAIC,SACTD,GAAGE,YAAc,MACjBF,GAAGG,IAAMJ,EAAMI,MACfH,GAAGI,OAAS,kBAGZJ,GAAGK,QAAU,iCAMlBC,KACYA,GAAYV,iJCrBrBW,6BACHC,KAAOD,EAAQC,MAAQ,OACvBC,UAAYF,EAAQE,6BACpBC,iBAAWH,EAAQf,WACVmB,KAAKD,MAAME,KAAK,cACnBd,IAAI,SAACC,EAAOc,KACVH,KAAKG,GAAOV,IAAMW,EAAKC,WAAWhB,iDAK3CiB,EAAQR,MACRS,GAAMD,EAAOE,WAAW,QACxBC,YAAc,OACb,GAAIC,IAAKZ,EAAMY,GAAKZ,EAAMY,GAAK,MAC3B,GAAIC,IAAKb,EAAMa,GAAKb,EAAMa,GAAK,IAC5BC,UAAUN,EAAQK,EAAGD,GACrBC,GAAK,GAAKD,GAAK,GAAGH,EAAIK,UAAUN,IAAUK,EAAI,KAAMD,EAAI,MAGhED,YAAc,qCAGXpB,MACHiB,GAASO,SAASC,cAAc,UAChCP,EAAMD,EAAOE,WAAW,eAErBO,MAAQ1B,EAAM0B,QACdC,OAAS3B,EAAM2B,SAClBJ,UAAUvB,EAAO,EAAG,QACnB4B,QAAQX,EAAQL,KAAKH,MACnBQ,EAAOY,UAAUjB,KAAKF"}